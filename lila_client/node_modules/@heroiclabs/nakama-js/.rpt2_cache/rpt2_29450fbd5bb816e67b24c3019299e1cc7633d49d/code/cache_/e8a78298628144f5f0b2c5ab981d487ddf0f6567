{"dts":{"name":"/Users/lugehorsam/nakama-js/packages/nakama-js/.rpt2_cache/placeholder/client.d.ts","writeByteOrderMark":false,"text":"import { ApiAccount, ApiAccountCustom, ApiAccountDevice, ApiAccountEmail, ApiAccountFacebook, ApiAccountFacebookInstantGame, ApiAccountGoogle, ApiAccountGameCenter, ApiAccountSteam, ApiCreateGroupRequest, ApiDeleteStorageObjectsRequest, ApiEvent, ApiMatchList, ApiReadStorageObjectsRequest, ApiStorageObjectAcks, ApiUpdateAccountRequest, ApiUpdateGroupRequest } from \"./api.gen\";\r\nimport { Session } from \"./session\";\r\nimport { Socket } from \"./socket\";\r\nimport { WebSocketAdapter } from \"./web_socket_adapter\";\r\nexport interface AccountCustom {\r\n    username?: string;\r\n    create?: boolean;\r\n    id?: string;\r\n    vars?: {\r\n        [key: string]: string;\r\n    };\r\n}\r\nexport interface AccountDevice {\r\n    username?: string;\r\n    create?: boolean;\r\n    id?: string;\r\n    vars?: {\r\n        [key: string]: string;\r\n    };\r\n}\r\nexport interface AccountEmail {\r\n    username?: string;\r\n    create?: boolean;\r\n    email?: string;\r\n    password?: string;\r\n    vars?: {\r\n        [key: string]: string;\r\n    };\r\n}\r\nexport interface AccountFacebook {\r\n    username?: string;\r\n    create?: boolean;\r\n    token?: string;\r\n    vars?: {\r\n        [key: string]: string;\r\n    };\r\n}\r\nexport interface AccountFacebookInstantGame {\r\n    username?: string;\r\n    create?: boolean;\r\n    signed_player_info?: string;\r\n    vars?: Map<string, string>;\r\n}\r\nexport interface AccountGameCenter {\r\n    username?: string;\r\n    create?: boolean;\r\n    bundle_id?: string;\r\n    player_id?: string;\r\n    public_key_url?: string;\r\n    salt?: string;\r\n    signature?: string;\r\n    timestamp_seconds?: string;\r\n    vars?: {\r\n        [key: string]: string;\r\n    };\r\n}\r\nexport interface AccountGoogle {\r\n    username?: string;\r\n    create?: boolean;\r\n    token?: string;\r\n    vars?: {\r\n        [key: string]: string;\r\n    };\r\n}\r\nexport interface AccountSteam {\r\n    username?: string;\r\n    create?: boolean;\r\n    token?: string;\r\n    vars?: {\r\n        [key: string]: string;\r\n    };\r\n}\r\nexport interface RpcResponse {\r\n    id?: string;\r\n    payload?: object;\r\n}\r\nexport interface LeaderboardRecord {\r\n    create_time?: string;\r\n    expiry_time?: string;\r\n    leaderboard_id?: string;\r\n    metadata?: object;\r\n    num_score?: number;\r\n    owner_id?: string;\r\n    rank?: number;\r\n    score?: number;\r\n    subscore?: number;\r\n    update_time?: string;\r\n    username?: string;\r\n    max_num_score?: number;\r\n}\r\nexport interface LeaderboardRecordList {\r\n    next_cursor?: string;\r\n    owner_records?: Array<LeaderboardRecord>;\r\n    prev_cursor?: string;\r\n    records?: Array<LeaderboardRecord>;\r\n}\r\nexport interface Tournament {\r\n    id?: string;\r\n    title?: string;\r\n    description?: string;\r\n    duration?: number;\r\n    category?: number;\r\n    sort_order?: number;\r\n    size?: number;\r\n    max_size?: number;\r\n    max_num_score?: number;\r\n    can_enter?: boolean;\r\n    end_active?: number;\r\n    next_reset?: number;\r\n    metadata?: object;\r\n    create_time?: string;\r\n    start_time?: string;\r\n    end_time?: string;\r\n    start_active?: number;\r\n}\r\nexport interface TournamentList {\r\n    tournaments?: Array<Tournament>;\r\n    cursor?: string;\r\n}\r\nexport interface TournamentRecordList {\r\n    next_cursor?: string;\r\n    owner_records?: Array<LeaderboardRecord>;\r\n    prev_cursor?: string;\r\n    records?: Array<LeaderboardRecord>;\r\n}\r\nexport interface WriteTournamentRecord {\r\n    metadata?: object;\r\n    score?: string;\r\n    subscore?: string;\r\n}\r\nexport interface WriteLeaderboardRecord {\r\n    metadata?: object;\r\n    score?: string;\r\n    subscore?: string;\r\n}\r\nexport interface WriteStorageObject {\r\n    collection?: string;\r\n    key?: string;\r\n    permission_read?: number;\r\n    permission_write?: number;\r\n    value?: object;\r\n    version?: string;\r\n}\r\nexport interface StorageObject {\r\n    collection?: string;\r\n    create_time?: string;\r\n    key?: string;\r\n    permission_read?: number;\r\n    permission_write?: number;\r\n    update_time?: string;\r\n    user_id?: string;\r\n    value?: object;\r\n    version?: string;\r\n}\r\nexport interface StorageObjectList {\r\n    cursor?: string;\r\n    objects: Array<StorageObject>;\r\n}\r\nexport interface StorageObjects {\r\n    objects: Array<StorageObject>;\r\n}\r\nexport interface ChannelMessage {\r\n    channel_id?: string;\r\n    code?: number;\r\n    content?: object;\r\n    create_time?: string;\r\n    group_id?: string;\r\n    message_id?: string;\r\n    persistent?: boolean;\r\n    room_name?: string;\r\n    reference_id?: string;\r\n    sender_id?: string;\r\n    update_time?: string;\r\n    user_id_one?: string;\r\n    user_id_two?: string;\r\n    username?: string;\r\n}\r\nexport interface ChannelMessageList {\r\n    messages?: Array<ChannelMessage>;\r\n    next_cursor?: string;\r\n    prev_cursor?: string;\r\n}\r\nexport interface User {\r\n    avatar_url?: string;\r\n    create_time?: string;\r\n    display_name?: string;\r\n    edge_count?: number;\r\n    facebook_id?: string;\r\n    gamecenter_id?: string;\r\n    google_id?: string;\r\n    id?: string;\r\n    lang_tag?: string;\r\n    location?: string;\r\n    metadata?: {};\r\n    online?: boolean;\r\n    steam_id?: string;\r\n    timezone?: string;\r\n    update_time?: string;\r\n    username?: string;\r\n}\r\nexport interface Users {\r\n    users?: Array<User>;\r\n}\r\nexport interface Friend {\r\n    state?: number;\r\n    user?: User;\r\n}\r\nexport interface Friends {\r\n    friends?: Array<Friend>;\r\n    cursor?: string;\r\n}\r\nexport interface GroupUser {\r\n    user?: User;\r\n    state?: number;\r\n}\r\nexport interface GroupUserList {\r\n    group_users?: Array<GroupUser>;\r\n    cursor?: string;\r\n}\r\nexport interface Group {\r\n    avatar_url?: string;\r\n    create_time?: string;\r\n    creator_id?: string;\r\n    description?: string;\r\n    edge_count?: number;\r\n    id?: string;\r\n    lang_tag?: string;\r\n    max_count?: number;\r\n    metadata?: {};\r\n    name?: string;\r\n    open?: boolean;\r\n    update_time?: string;\r\n}\r\nexport interface GroupList {\r\n    cursor?: string;\r\n    groups?: Array<Group>;\r\n}\r\nexport interface UserGroup {\r\n    group?: Group;\r\n    state?: number;\r\n}\r\nexport interface UserGroupList {\r\n    user_groups?: Array<UserGroup>;\r\n    cursor?: string;\r\n}\r\nexport interface Notification {\r\n    code?: number;\r\n    content?: {};\r\n    create_time?: string;\r\n    id?: string;\r\n    persistent?: boolean;\r\n    sender_id?: string;\r\n    subject?: string;\r\n}\r\nexport interface NotificationList {\r\n    cacheable_cursor?: string;\r\n    notifications?: Array<Notification>;\r\n}\r\nexport declare class Client {\r\n    readonly serverkey: string;\r\n    readonly host: string;\r\n    readonly port: string;\r\n    readonly useSSL: boolean;\r\n    readonly timeout: number;\r\n    private readonly apiClient;\r\n    private readonly configuration;\r\n    constructor(serverkey?: string, host?: string, port?: string, useSSL?: boolean, timeout?: number);\r\n    addGroupUsers(session: Session, groupId: string, ids?: Array<string>): Promise<boolean>;\r\n    addFriends(session: Session, ids?: Array<string>, usernames?: Array<string>): Promise<boolean>;\r\n    authenticateCustom(request: AccountCustom): Promise<Session>;\r\n    authenticateDevice(request: AccountDevice): Promise<Session>;\r\n    authenticateEmail(request: AccountEmail): Promise<Session>;\r\n    authenticateFacebookInstantGame(request: AccountFacebookInstantGame): Promise<Session>;\r\n    authenticateFacebook(request: AccountFacebook): Promise<Session>;\r\n    authenticateGoogle(request: AccountGoogle): Promise<Session>;\r\n    authenticateGameCenter(request: AccountGameCenter): Promise<Session>;\r\n    authenticateSteam(request: AccountSteam): Promise<Session>;\r\n    banGroupUsers(session: Session, groupId: string, ids?: Array<string>): Promise<boolean>;\r\n    blockFriends(session: Session, ids?: Array<string>, usernames?: Array<string>): Promise<boolean>;\r\n    createGroup(session: Session, request: ApiCreateGroupRequest): Promise<Group>;\r\n    createSocket(useSSL?: boolean, verbose?: boolean, adapter?: WebSocketAdapter): Socket;\r\n    deleteFriends(session: Session, ids?: Array<string>, usernames?: Array<string>): Promise<boolean>;\r\n    deleteGroup(session: Session, groupId: string): Promise<boolean>;\r\n    deleteNotifications(session: Session, ids?: Array<string>): Promise<boolean>;\r\n    deleteStorageObjects(session: Session, request: ApiDeleteStorageObjectsRequest): Promise<boolean>;\r\n    emitEvent(session: Session, request: ApiEvent): Promise<boolean>;\r\n    getAccount(session: Session): Promise<ApiAccount>;\r\n    importFacebookFriends(session: Session, request: ApiAccountFacebook): Promise<boolean>;\r\n    getUsers(session: Session, ids?: Array<string>, usernames?: Array<string>, facebookIds?: Array<string>): Promise<Users>;\r\n    joinGroup(session: Session, groupId: string): Promise<boolean>;\r\n    joinTournament(session: Session, tournamentId: string): Promise<boolean>;\r\n    kickGroupUsers(session: Session, groupId: string, ids?: Array<string>): Promise<boolean>;\r\n    leaveGroup(session: Session, groupId: string): Promise<boolean>;\r\n    listChannelMessages(session: Session, channelId: string, limit?: number, forward?: boolean, cursor?: string): Promise<ChannelMessageList>;\r\n    listGroupUsers(session: Session, groupId: string, state?: number, limit?: number, cursor?: string): Promise<GroupUserList>;\r\n    listUserGroups(session: Session, userId: string, state?: number, limit?: number, cursor?: string): Promise<UserGroupList>;\r\n    listGroups(session: Session, name?: string, cursor?: string, limit?: number): Promise<GroupList>;\r\n    linkCustom(session: Session, request: ApiAccountCustom): Promise<boolean>;\r\n    linkDevice(session: Session, request: ApiAccountDevice): Promise<boolean>;\r\n    linkEmail(session: Session, request: ApiAccountEmail): Promise<boolean>;\r\n    linkFacebook(session: Session, request: ApiAccountFacebook): Promise<boolean>;\r\n    linkFacebookInstantGame(session: Session, request: ApiAccountFacebookInstantGame): Promise<boolean>;\r\n    linkGoogle(session: Session, request: ApiAccountGoogle): Promise<boolean>;\r\n    linkGameCenter(session: Session, request: ApiAccountGameCenter): Promise<boolean>;\r\n    linkSteam(session: Session, request: ApiAccountSteam): Promise<boolean>;\r\n    listFriends(session: Session, state?: number, limit?: number, cursor?: string): Promise<Friends>;\r\n    listLeaderboardRecords(session: Session, leaderboardId: string, ownerIds?: Array<string>, limit?: number, cursor?: string, expiry?: string): Promise<LeaderboardRecordList>;\r\n    listLeaderboardRecordsAroundOwner(session: Session, leaderboardId: string, ownerId: string, limit?: number, expiry?: string): Promise<LeaderboardRecordList>;\r\n    listMatches(session: Session, limit?: number, authoritative?: boolean, label?: string, minSize?: number, maxSize?: number, query?: string): Promise<ApiMatchList>;\r\n    listNotifications(session: Session, limit?: number, cacheableCursor?: string): Promise<NotificationList>;\r\n    listStorageObjects(session: Session, collection: string, userId?: string, limit?: number, cursor?: string): Promise<StorageObjectList>;\r\n    listTournaments(session: Session, categoryStart?: number, categoryEnd?: number, startTime?: number, endTime?: number, limit?: number, cursor?: string): Promise<TournamentList>;\r\n    listTournamentRecords(session: Session, tournamentId: string, ownerIds?: Array<string>, limit?: number, cursor?: string, expiry?: string): Promise<TournamentRecordList>;\r\n    listTournamentRecordsAroundOwner(session: Session, tournamentId: string, ownerId: string, limit?: number, expiry?: string): Promise<TournamentRecordList>;\r\n    promoteGroupUsers(session: Session, groupId: string, ids?: Array<string>): Promise<boolean>;\r\n    readStorageObjects(session: Session, request: ApiReadStorageObjectsRequest): Promise<StorageObjects>;\r\n    rpc(session: Session, id: string, input: object): Promise<RpcResponse>;\r\n    rpcGet(id: string, session?: Session, httpKey?: string, input?: object): Promise<RpcResponse>;\r\n    unlinkCustom(session: Session, request: ApiAccountCustom): Promise<boolean>;\r\n    unlinkDevice(session: Session, request: ApiAccountDevice): Promise<boolean>;\r\n    unlinkEmail(session: Session, request: ApiAccountEmail): Promise<boolean>;\r\n    unlinkFacebook(session: Session, request: ApiAccountFacebook): Promise<boolean>;\r\n    unlinkFacebookInstantGame(session: Session, request: ApiAccountFacebookInstantGame): Promise<boolean>;\r\n    unlinkGoogle(session: Session, request: ApiAccountGoogle): Promise<boolean>;\r\n    unlinkGameCenter(session: Session, request: ApiAccountGameCenter): Promise<boolean>;\r\n    unlinkSteam(session: Session, request: ApiAccountSteam): Promise<boolean>;\r\n    updateAccount(session: Session, request: ApiUpdateAccountRequest): Promise<boolean>;\r\n    updateGroup(session: Session, groupId: string, request: ApiUpdateGroupRequest): Promise<boolean>;\r\n    writeLeaderboardRecord(session: Session, leaderboardId: string, request: WriteLeaderboardRecord): Promise<LeaderboardRecord>;\r\n    writeStorageObjects(session: Session, objects: Array<WriteStorageObject>): Promise<ApiStorageObjectAcks>;\r\n    writeTournamentRecord(session: Session, tournamentId: string, request: WriteTournamentRecord): Promise<LeaderboardRecord>;\r\n}\r\n"}}
