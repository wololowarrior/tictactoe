{"map":"{\"version\":3,\"file\":\"socket.js\",\"sourceRoot\":\"\",\"sources\":[\"../../socket.ts\"],\"names\":[],\"mappings\":\"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\"}","code":"import { __awaiter } from \"tslib\";\r\nimport { WebSocketAdapterText } from \"./web_socket_adapter\";\r\nimport { b64DecodeUnicode, b64EncodeUnicode } from \"./utils\";\r\nexport class DefaultSocket {\r\n    constructor(host, port, useSSL = false, verbose = false, adapter = new WebSocketAdapterText()) {\r\n        this.host = host;\r\n        this.port = port;\r\n        this.useSSL = useSSL;\r\n        this.verbose = verbose;\r\n        this.adapter = adapter;\r\n        this.cIds = {};\r\n        this.nextCid = 1;\r\n    }\r\n    generatecid() {\r\n        const cid = this.nextCid.toString();\r\n        ++this.nextCid;\r\n        return cid;\r\n    }\r\n    connect(session, createStatus = false) {\r\n        if (this.adapter.isConnected) {\r\n            return Promise.resolve(session);\r\n        }\r\n        const scheme = (this.useSSL) ? \"wss://\" : \"ws://\";\r\n        this.adapter.connect(scheme, this.host, this.port, createStatus, session.token);\r\n        this.adapter.onClose = (evt) => {\r\n            this.ondisconnect(evt);\r\n        };\r\n        this.adapter.onError = (evt) => {\r\n            this.onerror(evt);\r\n        };\r\n        this.adapter.onMessage = (message) => {\r\n            if (this.verbose && window && window.console) {\r\n                console.log(\"Response: %o\", message);\r\n            }\r\n            if (message.cid == undefined) {\r\n                if (message.notifications) {\r\n                    message.notifications.notifications.forEach((n) => {\r\n                        n.content = n.content ? JSON.parse(n.content) : undefined;\r\n                        this.onnotification(n);\r\n                    });\r\n                }\r\n                else if (message.match_data) {\r\n                    message.match_data.data = message.match_data.data != null ? JSON.parse(b64DecodeUnicode(message.match_data.data)) : null;\r\n                    message.match_data.op_code = parseInt(message.match_data.op_code);\r\n                    this.onmatchdata(message.match_data);\r\n                }\r\n                else if (message.match_presence_event) {\r\n                    this.onmatchpresence(message.match_presence_event);\r\n                }\r\n                else if (message.matchmaker_matched) {\r\n                    this.onmatchmakermatched(message.matchmaker_matched);\r\n                }\r\n                else if (message.status_presence_event) {\r\n                    this.onstatuspresence(message.status_presence_event);\r\n                }\r\n                else if (message.stream_presence_event) {\r\n                    this.onstreampresence(message.stream_presence_event);\r\n                }\r\n                else if (message.stream_data) {\r\n                    this.onstreamdata(message.stream_data);\r\n                }\r\n                else if (message.channel_message) {\r\n                    message.channel_message.content = JSON.parse(message.channel_message.content);\r\n                    this.onchannelmessage(message.channel_message);\r\n                }\r\n                else if (message.channel_presence_event) {\r\n                    this.onchannelpresence(message.channel_presence_event);\r\n                }\r\n                else {\r\n                    if (this.verbose && window && window.console) {\r\n                        console.log(\"Unrecognized message received: %o\", message);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                const executor = this.cIds[message.cid];\r\n                if (!executor) {\r\n                    if (this.verbose && window && window.console) {\r\n                        console.error(\"No promise executor for message: %o\", message);\r\n                    }\r\n                    return;\r\n                }\r\n                delete this.cIds[message.cid];\r\n                if (message.error) {\r\n                    executor.reject(message.error);\r\n                }\r\n                else {\r\n                    executor.resolve(message);\r\n                }\r\n            }\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            this.adapter.onOpen = (evt) => {\r\n                if (this.verbose && window && window.console) {\r\n                    console.log(evt);\r\n                }\r\n                resolve(session);\r\n            };\r\n            this.adapter.onError = (evt) => {\r\n                reject(evt);\r\n                this.adapter.close();\r\n            };\r\n        });\r\n    }\r\n    disconnect(fireDisconnectEvent = true) {\r\n        if (this.adapter.isConnected) {\r\n            this.adapter.close();\r\n        }\r\n        if (fireDisconnectEvent) {\r\n            this.ondisconnect({});\r\n        }\r\n    }\r\n    ondisconnect(evt) {\r\n        if (this.verbose && window && window.console) {\r\n            console.log(evt);\r\n        }\r\n    }\r\n    onerror(evt) {\r\n        if (this.verbose && window && window.console) {\r\n            console.log(evt);\r\n        }\r\n    }\r\n    onchannelmessage(channelMessage) {\r\n        if (this.verbose && window && window.console) {\r\n            console.log(channelMessage);\r\n        }\r\n    }\r\n    onchannelpresence(channelPresence) {\r\n        if (this.verbose && window && window.console) {\r\n            console.log(channelPresence);\r\n        }\r\n    }\r\n    onnotification(notification) {\r\n        if (this.verbose && window && window.console) {\r\n            console.log(notification);\r\n        }\r\n    }\r\n    onmatchdata(matchData) {\r\n        if (this.verbose && window && window.console) {\r\n            console.log(matchData);\r\n        }\r\n    }\r\n    onmatchpresence(matchPresence) {\r\n        if (this.verbose && window && window.console) {\r\n            console.log(matchPresence);\r\n        }\r\n    }\r\n    onmatchmakermatched(matchmakerMatched) {\r\n        if (this.verbose && window && window.console) {\r\n            console.log(matchmakerMatched);\r\n        }\r\n    }\r\n    onstatuspresence(statusPresence) {\r\n        if (this.verbose && window && window.console) {\r\n            console.log(statusPresence);\r\n        }\r\n    }\r\n    onstreampresence(streamPresence) {\r\n        if (this.verbose && window && window.console) {\r\n            console.log(streamPresence);\r\n        }\r\n    }\r\n    onstreamdata(streamData) {\r\n        if (this.verbose && window && window.console) {\r\n            console.log(streamData);\r\n        }\r\n    }\r\n    send(message) {\r\n        const untypedMessage = message;\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.adapter.isConnected) {\r\n                reject(\"Socket connection has not been established yet.\");\r\n            }\r\n            else {\r\n                if (untypedMessage.match_data_send) {\r\n                    untypedMessage.match_data_send.data = b64EncodeUnicode(JSON.stringify(untypedMessage.match_data_send.data));\r\n                    this.adapter.send(untypedMessage);\r\n                    resolve();\r\n                }\r\n                else {\r\n                    if (untypedMessage.channel_message_send) {\r\n                        untypedMessage.channel_message_send.content = JSON.stringify(untypedMessage.channel_message_send.content);\r\n                    }\r\n                    else if (untypedMessage.channel_message_update) {\r\n                        untypedMessage.channel_message_update.content = JSON.stringify(untypedMessage.channel_message_update.content);\r\n                    }\r\n                    const cid = this.generatecid();\r\n                    this.cIds[cid] = { resolve, reject };\r\n                    untypedMessage.cid = cid;\r\n                    this.adapter.send(untypedMessage);\r\n                }\r\n            }\r\n            if (this.verbose && window && window.console) {\r\n                console.log(\"Sent message: %o\", untypedMessage);\r\n            }\r\n        });\r\n    }\r\n    addMatchmaker(query, minCount, maxCount, stringProperties, numericProperties) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const matchMakerAdd = {\r\n                \"matchmaker_add\": {\r\n                    min_count: minCount,\r\n                    max_count: maxCount,\r\n                    query: query,\r\n                    string_properties: stringProperties,\r\n                    numeric_properties: numericProperties\r\n                }\r\n            };\r\n            const response = yield this.send(matchMakerAdd);\r\n            return response.matchmaker_ticket;\r\n        });\r\n    }\r\n    createMatch() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = yield this.send({ match_create: {} });\r\n            return response.match;\r\n        });\r\n    }\r\n    followUsers(userIds) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = yield this.send({ status_follow: { user_ids: userIds } });\r\n            return response.status;\r\n        });\r\n    }\r\n    joinChat(target, type, persistence, hidden) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = yield this.send({\r\n                channel_join: {\r\n                    target: target,\r\n                    type: type,\r\n                    persistence: persistence,\r\n                    hidden: hidden\r\n                }\r\n            });\r\n            return response.channel;\r\n        });\r\n    }\r\n    joinMatch(match_id, token, metadata) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const join = { match_join: { metadata: metadata } };\r\n            if (token) {\r\n                join.match_join.token = token;\r\n            }\r\n            else {\r\n                join.match_join.match_id = match_id;\r\n            }\r\n            const response = yield this.send(join);\r\n            return response.match;\r\n        });\r\n    }\r\n    leaveChat(channel_id) {\r\n        return this.send({ channel_leave: { channel_id: channel_id } });\r\n    }\r\n    leaveMatch(matchId) {\r\n        return this.send({ match_leave: { match_id: matchId } });\r\n    }\r\n    removeChatMessage(channel_id, message_id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = yield this.send({\r\n                channel_message_remove: {\r\n                    channel_id: channel_id,\r\n                    message_id: message_id\r\n                }\r\n            });\r\n            return response.channel_message_ack;\r\n        });\r\n    }\r\n    removeMatchmaker(ticket) {\r\n        return this.send({ matchmaker_remove: { ticket: ticket } });\r\n    }\r\n    rpc(id, payload, http_key) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = yield this.send({\r\n                rpc: {\r\n                    id: id,\r\n                    payload: payload,\r\n                    http_key: http_key,\r\n                }\r\n            });\r\n            return response.rpc;\r\n        });\r\n    }\r\n    sendMatchState(matchId, opCode, data, presences) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.send({\r\n                match_data_send: {\r\n                    match_id: matchId,\r\n                    op_code: opCode,\r\n                    data: data,\r\n                    presences: presences !== null && presences !== void 0 ? presences : []\r\n                }\r\n            });\r\n        });\r\n    }\r\n    unfollowUsers(user_ids) {\r\n        return this.send({ status_unfollow: { user_ids: user_ids } });\r\n    }\r\n    updateChatMessage(channel_id, message_id, content) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = yield this.send({ channel_message_update: { channel_id: channel_id, message_id: message_id, content: content } });\r\n            return response.channel_message_ack;\r\n        });\r\n    }\r\n    updateStatus(status) {\r\n        return this.send({ status_update: { status: status } });\r\n    }\r\n    writeChatMessage(channel_id, content) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = yield this.send({ channel_message_send: { channel_id: channel_id, content: content } });\r\n            return response.channel_message_ack;\r\n        });\r\n    }\r\n}\r\n;\r\n//# sourceMappingURL=socket.js.map","dts":{"name":"/Users/lugehorsam/nakama-js/packages/nakama-js/.rpt2_cache/placeholder/socket.d.ts","writeByteOrderMark":false,"text":"import { ApiRpc } from \"./api.gen\";\r\nimport { Session } from \"./session\";\r\nimport { Notification } from \"./client\";\r\nimport { WebSocketAdapter } from \"./web_socket_adapter\";\r\ndeclare type RequireKeys<T, K extends keyof T> = Omit<Partial<T>, K> & Pick<T, K>;\r\nexport interface Presence {\r\n    user_id: string;\r\n    session_id: string;\r\n    username: string;\r\n    node: string;\r\n}\r\nexport interface Channel {\r\n    id: string;\r\n    presences: Presence[];\r\n    self: Presence;\r\n}\r\nexport interface ChannelJoin {\r\n    channel_join: {\r\n        target: string;\r\n        type: number;\r\n        persistence: boolean;\r\n        hidden: boolean;\r\n    };\r\n}\r\nexport interface ChannelLeave {\r\n    channel_leave: {\r\n        channel_id: string;\r\n    };\r\n}\r\nexport interface ChannelMessage {\r\n    channel_id: string;\r\n    message_id: string;\r\n    code: number;\r\n    sender_id: string;\r\n    username: string;\r\n    content: any;\r\n    create_time: string;\r\n    update_time: string;\r\n    persistent: boolean;\r\n    group_id: string;\r\n    room_name: string;\r\n    user_id_one: string;\r\n    user_id_two: string;\r\n}\r\nexport interface ChannelMessageAck {\r\n    channel_id: string;\r\n    message_id: string;\r\n    code: number;\r\n    username: string;\r\n    create_time: string;\r\n    update_time: string;\r\n    persistence: boolean;\r\n}\r\nexport interface ChannelMessageSend {\r\n    channel_message_send: {\r\n        channel_id: string;\r\n        content: any;\r\n    };\r\n}\r\nexport interface ChannelMessageUpdate {\r\n    channel_message_update: {\r\n        channel_id: string;\r\n        message_id: string;\r\n        content: any;\r\n    };\r\n}\r\nexport interface ChannelMessageRemove {\r\n    channel_message_remove: {\r\n        channel_id: string;\r\n        message_id: string;\r\n    };\r\n}\r\nexport interface ChannelPresenceEvent {\r\n    channel_id: string;\r\n    joins: Presence[];\r\n    leaves: Presence[];\r\n}\r\nexport interface StreamId {\r\n    mode: number;\r\n    subject: string;\r\n    descriptor: string;\r\n    label: string;\r\n}\r\nexport interface StreamData {\r\n    stream: StreamId;\r\n    stream_presence: Presence;\r\n    data: string;\r\n}\r\nexport interface StreamPresenceEvent {\r\n    stream: StreamId;\r\n    joins: Presence[];\r\n    leaves: Presence[];\r\n}\r\nexport interface MatchPresenceEvent {\r\n    match_id: string;\r\n    joins: Presence[];\r\n    leaves: Presence[];\r\n}\r\nexport interface MatchmakerAdd {\r\n    matchmaker_add: {\r\n        min_count: number;\r\n        max_count: number;\r\n        query: string;\r\n        string_properties?: Record<string, string>;\r\n        numeric_properties?: Record<string, number>;\r\n    };\r\n}\r\nexport interface MatchmakerRemove {\r\n    matchmaker_remove: {\r\n        ticket: string;\r\n    };\r\n}\r\nexport interface MatchmakerUser {\r\n    presence: Presence;\r\n    string_properties?: Record<string, string>;\r\n    numeric_properties?: Record<string, number>;\r\n}\r\nexport interface MatchmakerMatched {\r\n    ticket: string;\r\n    match_id: string;\r\n    token: string;\r\n    users: MatchmakerUser[];\r\n    self: MatchmakerUser;\r\n}\r\nexport interface Match {\r\n    match_id: string;\r\n    authoritative: boolean;\r\n    label?: string;\r\n    size: number;\r\n    presences: Presence[];\r\n    self: Presence;\r\n}\r\nexport interface CreateMatch {\r\n    match_create: {};\r\n}\r\nexport interface JoinMatch {\r\n    match_join: {\r\n        match_id?: string;\r\n        token?: string;\r\n        metadata?: {};\r\n    };\r\n}\r\nexport interface LeaveMatch {\r\n    match_leave: {\r\n        match_id: string;\r\n    };\r\n}\r\nexport interface MatchData {\r\n    match_id: string;\r\n    op_code: number;\r\n    data: any;\r\n    presences: Presence[];\r\n}\r\nexport interface MatchDataSend {\r\n    match_data_send: RequireKeys<MatchData, \"match_id\" | \"op_code\" | \"data\">;\r\n}\r\nexport interface Rpc {\r\n    rpc: ApiRpc;\r\n}\r\nexport interface Status {\r\n    presences: Presence[];\r\n}\r\nexport interface StatusFollow {\r\n    status_follow: {\r\n        user_ids: string[];\r\n    };\r\n}\r\nexport interface StatusPresenceEvent {\r\n    joins: Presence[];\r\n    leaves: Presence[];\r\n}\r\nexport interface StatusUnfollow {\r\n    status_unfollow: {\r\n        user_ids: string[];\r\n    };\r\n}\r\nexport interface StatusUpdate {\r\n    status_update: {\r\n        status?: string;\r\n    };\r\n}\r\nexport interface Socket {\r\n    connect(session: Session, createStatus: boolean): Promise<Session>;\r\n    disconnect(fireDisconnectEvent: boolean): void;\r\n    send(message: ChannelJoin | ChannelLeave | ChannelMessageSend | ChannelMessageUpdate | ChannelMessageRemove | CreateMatch | JoinMatch | LeaveMatch | MatchDataSend | MatchmakerAdd | MatchmakerRemove | Rpc | StatusFollow | StatusUnfollow | StatusUpdate): Promise<any>;\r\n    addMatchmaker(query: string, minCount: number, maxCount: number, stringProperties?: Record<string, string>, numericProperties?: Record<string, number>): Promise<MatchmakerMatched>;\r\n    createMatch(): Promise<Match>;\r\n    followUsers(user_ids: string[]): Promise<Status>;\r\n    joinChat(target: string, type: number, persistence: boolean, hidden: boolean): Promise<Channel>;\r\n    joinMatch(match_id?: string, token?: string, metadata?: {}): Promise<Match>;\r\n    leaveChat(channel_id: string): Promise<void>;\r\n    leaveMatch(matchId: string): Promise<void>;\r\n    removeChatMessage(channel_id: string, message_id: string): Promise<ChannelMessageAck>;\r\n    removeMatchmaker(ticket: string): Promise<void>;\r\n    rpc(id?: string, payload?: string, http_key?: string): Promise<ApiRpc>;\r\n    sendMatchState(matchId: string, opCode: number, data: any, presence?: Presence[]): Promise<void>;\r\n    unfollowUsers(user_ids: string[]): Promise<void>;\r\n    updateChatMessage(channel_id: string, message_id: string, content: any): Promise<ChannelMessageAck>;\r\n    updateStatus(status?: string): Promise<void>;\r\n    writeChatMessage(channel_id: string, content: any): Promise<ChannelMessageAck>;\r\n    ondisconnect: (evt: Event) => void;\r\n    onerror: (evt: Event) => void;\r\n    onnotification: (notification: Notification) => void;\r\n    onmatchdata: (matchData: MatchData) => void;\r\n    onmatchpresence: (matchPresence: MatchPresenceEvent) => void;\r\n    onmatchmakermatched: (matchmakerMatched: MatchmakerMatched) => void;\r\n    onstatuspresence: (statusPresence: StatusPresenceEvent) => void;\r\n    onstreampresence: (streamPresence: StreamPresenceEvent) => void;\r\n    onstreamdata: (streamData: StreamData) => void;\r\n    onchannelmessage: (channelMessage: ChannelMessage) => void;\r\n    onchannelpresence: (channelPresence: ChannelPresenceEvent) => void;\r\n}\r\nexport interface SocketError {\r\n    code: number;\r\n    message: string;\r\n}\r\nexport declare class DefaultSocket implements Socket {\r\n    readonly host: string;\r\n    readonly port: string;\r\n    readonly useSSL: boolean;\r\n    verbose: boolean;\r\n    readonly adapter: WebSocketAdapter;\r\n    private readonly cIds;\r\n    private nextCid;\r\n    constructor(host: string, port: string, useSSL?: boolean, verbose?: boolean, adapter?: WebSocketAdapter);\r\n    generatecid(): string;\r\n    connect(session: Session, createStatus?: boolean): Promise<Session>;\r\n    disconnect(fireDisconnectEvent?: boolean): void;\r\n    ondisconnect(evt: Event): void;\r\n    onerror(evt: Event): void;\r\n    onchannelmessage(channelMessage: ChannelMessage): void;\r\n    onchannelpresence(channelPresence: ChannelPresenceEvent): void;\r\n    onnotification(notification: Notification): void;\r\n    onmatchdata(matchData: MatchData): void;\r\n    onmatchpresence(matchPresence: MatchPresenceEvent): void;\r\n    onmatchmakermatched(matchmakerMatched: MatchmakerMatched): void;\r\n    onstatuspresence(statusPresence: StatusPresenceEvent): void;\r\n    onstreampresence(streamPresence: StreamPresenceEvent): void;\r\n    onstreamdata(streamData: StreamData): void;\r\n    send(message: ChannelJoin | ChannelLeave | ChannelMessageSend | ChannelMessageUpdate | ChannelMessageRemove | CreateMatch | JoinMatch | LeaveMatch | MatchDataSend | MatchmakerAdd | MatchmakerRemove | Rpc | StatusFollow | StatusUnfollow | StatusUpdate): Promise<any>;\r\n    addMatchmaker(query: string, minCount: number, maxCount: number, stringProperties?: Record<string, string>, numericProperties?: Record<string, number>): Promise<MatchmakerMatched>;\r\n    createMatch(): Promise<Match>;\r\n    followUsers(userIds: string[]): Promise<Status>;\r\n    joinChat(target: string, type: number, persistence: boolean, hidden: boolean): Promise<Channel>;\r\n    joinMatch(match_id?: string, token?: string, metadata?: {}): Promise<Match>;\r\n    leaveChat(channel_id: string): Promise<void>;\r\n    leaveMatch(matchId: string): Promise<void>;\r\n    removeChatMessage(channel_id: string, message_id: string): Promise<ChannelMessageAck>;\r\n    removeMatchmaker(ticket: string): Promise<void>;\r\n    rpc(id?: string, payload?: string, http_key?: string): Promise<ApiRpc>;\r\n    sendMatchState(matchId: string, opCode: number, data: any, presences?: Presence[]): Promise<void>;\r\n    unfollowUsers(user_ids: string[]): Promise<void>;\r\n    updateChatMessage(channel_id: string, message_id: string, content: any): Promise<ChannelMessageAck>;\r\n    updateStatus(status?: string): Promise<void>;\r\n    writeChatMessage(channel_id: string, content: any): Promise<ChannelMessageAck>;\r\n}\r\nexport {};\r\n"}}
